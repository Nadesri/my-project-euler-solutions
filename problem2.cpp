// Problem 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#include <iostream>
#include <time.h>       /* clock_t, clock, CLOCKS_PER_SEC */
using namespace std;
int fibonacci(int a);
int fibonacci(int current, int previous);

int main() {
	int a = 0;
	int i = 0;
	int sum = 0;

	int current  = 1;
	int previous = 1;
	int next = 0;

	int start = clock();
	while (a<4000000) {
		if ((a%2)==0) {
			sum += a;
		}

		// a = fibonacci(i);
		// i++;

		next = fibonacci(current,previous);
		a = next;
		previous = current;
		current  = next;
	}
	int end = clock();
	cout << "Result: " << sum << endl;
	cout << "Time elapsed: " << ((end-start)*1000)/CLOCKS_PER_SEC << " milliseconds." << endl;
	cout << "Time Resolution: " << CLOCKS_PER_SEC << endl;
	return 0;
}


int fibonacci(int a) {
	if (a==0||a==1) {
		return 1;
	} else {
		return fibonacci(a-1)+fibonacci(a-2);
	}
}

int fibonacci(int current, int previous) {
	return current+previous;
}