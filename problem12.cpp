// Highly divisible triangular number
// The sequence of triangle numbers is generated by adding the natural numbers. 
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?


#include <iostream>
#include <time.h>       /* clock_t, clock, CLOCKS_PER_SEC */
#include <math.h>
using namespace std;

int trinum(int i);
int numdivisors(int num);

int main() {

	int result;

	int start = clock();

	int i=0;
	do {
		i++;
		result = trinum(i);
		result = numdivisors(result);
	} while (result<=500);

	result = trinum(i);

	int end = clock();
	cout << "Result: " << result << " , i= " << i << endl;
	cout << "Time elapsed: " << ((end-start)*1000)/CLOCKS_PER_SEC << " milliseconds." << endl;
	cout << "Time Resolution: " << CLOCKS_PER_SEC << endl;
	return 0;
}

int trinum(int i) {
	int result=(i*(i+1))/2;
	return (result>0)? result : 0;
}

int numdivisors(int mynum) {
	int result=0;
	for (int i=1; i<=sqrt(mynum); i++) {
		if (mynum%i==0) {
			if (i==sqrt(mynum)) {
				result++;    // mynum == i*i.
			} else {
				result += 2; // There exist two factors; mynum == i*j, some j for the current i.
			}
		}
	}
	return result;
}